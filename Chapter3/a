{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9529f99f",
   "metadata": {},
   "source": [
    "Prediction median_house_value using logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3b71ad1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "87432952",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('housing.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "223d5ee7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>-122.23</td>\n",
       "      <td>-122.22</td>\n",
       "      <td>-122.24</td>\n",
       "      <td>-122.25</td>\n",
       "      <td>-122.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>37.88</td>\n",
       "      <td>37.86</td>\n",
       "      <td>37.85</td>\n",
       "      <td>37.85</td>\n",
       "      <td>37.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>housing_median_age</th>\n",
       "      <td>41.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_rooms</th>\n",
       "      <td>880.0</td>\n",
       "      <td>7099.0</td>\n",
       "      <td>1467.0</td>\n",
       "      <td>1274.0</td>\n",
       "      <td>1627.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_bedrooms</th>\n",
       "      <td>129.0</td>\n",
       "      <td>1106.0</td>\n",
       "      <td>190.0</td>\n",
       "      <td>235.0</td>\n",
       "      <td>280.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>population</th>\n",
       "      <td>322.0</td>\n",
       "      <td>2401.0</td>\n",
       "      <td>496.0</td>\n",
       "      <td>558.0</td>\n",
       "      <td>565.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>households</th>\n",
       "      <td>126.0</td>\n",
       "      <td>1138.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>219.0</td>\n",
       "      <td>259.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median_income</th>\n",
       "      <td>8.3252</td>\n",
       "      <td>8.3014</td>\n",
       "      <td>7.2574</td>\n",
       "      <td>5.6431</td>\n",
       "      <td>3.8462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median_house_value</th>\n",
       "      <td>452600.0</td>\n",
       "      <td>358500.0</td>\n",
       "      <td>352100.0</td>\n",
       "      <td>341300.0</td>\n",
       "      <td>342200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ocean_proximity</th>\n",
       "      <td>NEAR BAY</td>\n",
       "      <td>NEAR BAY</td>\n",
       "      <td>NEAR BAY</td>\n",
       "      <td>NEAR BAY</td>\n",
       "      <td>NEAR BAY</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           0         1         2         3         4\n",
       "longitude            -122.23   -122.22   -122.24   -122.25   -122.25\n",
       "latitude               37.88     37.86     37.85     37.85     37.85\n",
       "housing_median_age      41.0      21.0      52.0      52.0      52.0\n",
       "total_rooms            880.0    7099.0    1467.0    1274.0    1627.0\n",
       "total_bedrooms         129.0    1106.0     190.0     235.0     280.0\n",
       "population             322.0    2401.0     496.0     558.0     565.0\n",
       "households             126.0    1138.0     177.0     219.0     259.0\n",
       "median_income         8.3252    8.3014    7.2574    5.6431    3.8462\n",
       "median_house_value  452600.0  358500.0  352100.0  341300.0  342200.0\n",
       "ocean_proximity     NEAR BAY  NEAR BAY  NEAR BAY  NEAR BAY  NEAR BAY"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head().T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07f8ffc8",
   "metadata": {},
   "source": [
    "# Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "08cf516c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 20640 entries, 0 to 20639\n",
      "Data columns (total 10 columns):\n",
      " #   Column              Non-Null Count  Dtype  \n",
      "---  ------              --------------  -----  \n",
      " 0   longitude           20640 non-null  float64\n",
      " 1   latitude            20640 non-null  float64\n",
      " 2   housing_median_age  20640 non-null  float64\n",
      " 3   total_rooms         20640 non-null  float64\n",
      " 4   total_bedrooms      20433 non-null  float64\n",
      " 5   population          20640 non-null  float64\n",
      " 6   households          20640 non-null  float64\n",
      " 7   median_income       20640 non-null  float64\n",
      " 8   median_house_value  20640 non-null  float64\n",
      " 9   ocean_proximity     20640 non-null  object \n",
      "dtypes: float64(9), object(1)\n",
      "memory usage: 1.6+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c55b8890",
   "metadata": {},
   "source": [
    "We are using all the columns availabe"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25934b4c",
   "metadata": {},
   "source": [
    "# Data preparation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "87642529",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.fillna(0,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "650d3db5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['rooms_per_household'] = df['total_rooms']/df['households']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b3cd1246",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bedrooms_per_room'] = df['total_bedrooms']/df['total_rooms']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e56a3996",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['population_per_household'] = df['population']/df['households']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48b4eb11",
   "metadata": {},
   "source": [
    "# Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d1d2f805",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<1H OCEAN'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.ocean_proximity.mode().values[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e9833e7",
   "metadata": {},
   "source": [
    "# Split the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "36183c94",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "483ca865",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_full_train,df_test = train_test_split(df,test_size=0.2,random_state=42)\n",
    "df_train,df_val = train_test_split(df,test_size=0.25,random_state=42)\n",
    "\n",
    "y_train = df_train.median_house_value.values\n",
    "y_val = df_val.median_house_value.values\n",
    "y_test = df_test.median_house_value.values\n",
    "\n",
    "df_train.reset_index(inplace=True)\n",
    "df_val.reset_index(inplace=True)\n",
    "df_test.reset_index(inplace=True)\n",
    "\n",
    "del df_train['median_house_value']\n",
    "del df_val['median_house_value']\n",
    "del df_test['median_house_value']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c431258d",
   "metadata": {},
   "source": [
    "# Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "8e9fc093",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical = df_train.dtypes[df_train.dtypes=='float'].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "f5786008",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>housing_median_age</th>\n",
       "      <th>total_rooms</th>\n",
       "      <th>total_bedrooms</th>\n",
       "      <th>population</th>\n",
       "      <th>households</th>\n",
       "      <th>median_income</th>\n",
       "      <th>rooms_per_household</th>\n",
       "      <th>bedrooms_per_room</th>\n",
       "      <th>population_per_household</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>longitude</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.924057</td>\n",
       "      <td>-0.103825</td>\n",
       "      <td>0.036997</td>\n",
       "      <td>0.061303</td>\n",
       "      <td>0.092118</td>\n",
       "      <td>0.047509</td>\n",
       "      <td>-0.016418</td>\n",
       "      <td>-0.027944</td>\n",
       "      <td>0.097318</td>\n",
       "      <td>-0.001451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>latitude</th>\n",
       "      <td>-0.924057</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007177</td>\n",
       "      <td>-0.027330</td>\n",
       "      <td>-0.057967</td>\n",
       "      <td>-0.100419</td>\n",
       "      <td>-0.061960</td>\n",
       "      <td>-0.077450</td>\n",
       "      <td>0.109427</td>\n",
       "      <td>-0.119327</td>\n",
       "      <td>0.006698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>housing_median_age</th>\n",
       "      <td>-0.103825</td>\n",
       "      <td>0.007177</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.361125</td>\n",
       "      <td>-0.320775</td>\n",
       "      <td>-0.291613</td>\n",
       "      <td>-0.302698</td>\n",
       "      <td>-0.120281</td>\n",
       "      <td>-0.158839</td>\n",
       "      <td>0.134313</td>\n",
       "      <td>0.016929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_rooms</th>\n",
       "      <td>0.036997</td>\n",
       "      <td>-0.027330</td>\n",
       "      <td>-0.361125</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.930673</td>\n",
       "      <td>0.857934</td>\n",
       "      <td>0.920322</td>\n",
       "      <td>0.196231</td>\n",
       "      <td>0.134427</td>\n",
       "      <td>-0.187596</td>\n",
       "      <td>-0.025294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>total_bedrooms</th>\n",
       "      <td>0.061303</td>\n",
       "      <td>-0.057967</td>\n",
       "      <td>-0.320775</td>\n",
       "      <td>0.930673</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.879122</td>\n",
       "      <td>0.980270</td>\n",
       "      <td>-0.010142</td>\n",
       "      <td>-0.001457</td>\n",
       "      <td>0.084422</td>\n",
       "      <td>-0.028776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>population</th>\n",
       "      <td>0.092118</td>\n",
       "      <td>-0.100419</td>\n",
       "      <td>-0.291613</td>\n",
       "      <td>0.857934</td>\n",
       "      <td>0.879122</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.907422</td>\n",
       "      <td>0.002841</td>\n",
       "      <td>-0.073628</td>\n",
       "      <td>0.035933</td>\n",
       "      <td>0.073094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>households</th>\n",
       "      <td>0.047509</td>\n",
       "      <td>-0.061960</td>\n",
       "      <td>-0.302698</td>\n",
       "      <td>0.920322</td>\n",
       "      <td>0.980270</td>\n",
       "      <td>0.907422</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.011211</td>\n",
       "      <td>-0.082918</td>\n",
       "      <td>0.065054</td>\n",
       "      <td>-0.027934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>median_income</th>\n",
       "      <td>-0.016418</td>\n",
       "      <td>-0.077450</td>\n",
       "      <td>-0.120281</td>\n",
       "      <td>0.196231</td>\n",
       "      <td>-0.010142</td>\n",
       "      <td>0.002841</td>\n",
       "      <td>0.011211</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.331317</td>\n",
       "      <td>-0.613528</td>\n",
       "      <td>0.023268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>rooms_per_household</th>\n",
       "      <td>-0.027944</td>\n",
       "      <td>0.109427</td>\n",
       "      <td>-0.158839</td>\n",
       "      <td>0.134427</td>\n",
       "      <td>-0.001457</td>\n",
       "      <td>-0.073628</td>\n",
       "      <td>-0.082918</td>\n",
       "      <td>0.331317</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.429570</td>\n",
       "      <td>-0.004795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bedrooms_per_room</th>\n",
       "      <td>0.097318</td>\n",
       "      <td>-0.119327</td>\n",
       "      <td>0.134313</td>\n",
       "      <td>-0.187596</td>\n",
       "      <td>0.084422</td>\n",
       "      <td>0.035933</td>\n",
       "      <td>0.065054</td>\n",
       "      <td>-0.613528</td>\n",
       "      <td>-0.429570</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>population_per_household</th>\n",
       "      <td>-0.001451</td>\n",
       "      <td>0.006698</td>\n",
       "      <td>0.016929</td>\n",
       "      <td>-0.025294</td>\n",
       "      <td>-0.028776</td>\n",
       "      <td>0.073094</td>\n",
       "      <td>-0.027934</td>\n",
       "      <td>0.023268</td>\n",
       "      <td>-0.004795</td>\n",
       "      <td>0.003966</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          longitude  latitude  housing_median_age  \\\n",
       "longitude                  1.000000 -0.924057           -0.103825   \n",
       "latitude                  -0.924057  1.000000            0.007177   \n",
       "housing_median_age        -0.103825  0.007177            1.000000   \n",
       "total_rooms                0.036997 -0.027330           -0.361125   \n",
       "total_bedrooms             0.061303 -0.057967           -0.320775   \n",
       "population                 0.092118 -0.100419           -0.291613   \n",
       "households                 0.047509 -0.061960           -0.302698   \n",
       "median_income             -0.016418 -0.077450           -0.120281   \n",
       "rooms_per_household       -0.027944  0.109427           -0.158839   \n",
       "bedrooms_per_room          0.097318 -0.119327            0.134313   \n",
       "population_per_household  -0.001451  0.006698            0.016929   \n",
       "\n",
       "                          total_rooms  total_bedrooms  population  households  \\\n",
       "longitude                    0.036997        0.061303    0.092118    0.047509   \n",
       "latitude                    -0.027330       -0.057967   -0.100419   -0.061960   \n",
       "housing_median_age          -0.361125       -0.320775   -0.291613   -0.302698   \n",
       "total_rooms                  1.000000        0.930673    0.857934    0.920322   \n",
       "total_bedrooms               0.930673        1.000000    0.879122    0.980270   \n",
       "population                   0.857934        0.879122    1.000000    0.907422   \n",
       "households                   0.920322        0.980270    0.907422    1.000000   \n",
       "median_income                0.196231       -0.010142    0.002841    0.011211   \n",
       "rooms_per_household          0.134427       -0.001457   -0.073628   -0.082918   \n",
       "bedrooms_per_room           -0.187596        0.084422    0.035933    0.065054   \n",
       "population_per_household    -0.025294       -0.028776    0.073094   -0.027934   \n",
       "\n",
       "                          median_income  rooms_per_household  \\\n",
       "longitude                     -0.016418            -0.027944   \n",
       "latitude                      -0.077450             0.109427   \n",
       "housing_median_age            -0.120281            -0.158839   \n",
       "total_rooms                    0.196231             0.134427   \n",
       "total_bedrooms                -0.010142            -0.001457   \n",
       "population                     0.002841            -0.073628   \n",
       "households                     0.011211            -0.082918   \n",
       "median_income                  1.000000             0.331317   \n",
       "rooms_per_household            0.331317             1.000000   \n",
       "bedrooms_per_room             -0.613528            -0.429570   \n",
       "population_per_household       0.023268            -0.004795   \n",
       "\n",
       "                          bedrooms_per_room  population_per_household  \n",
       "longitude                          0.097318                 -0.001451  \n",
       "latitude                          -0.119327                  0.006698  \n",
       "housing_median_age                 0.134313                  0.016929  \n",
       "total_rooms                       -0.187596                 -0.025294  \n",
       "total_bedrooms                     0.084422                 -0.028776  \n",
       "population                         0.035933                  0.073094  \n",
       "households                         0.065054                 -0.027934  \n",
       "median_income                     -0.613528                  0.023268  \n",
       "rooms_per_household               -0.429570                 -0.004795  \n",
       "bedrooms_per_room                  1.000000                  0.003966  \n",
       "population_per_household           0.003966                  1.000000  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr = df_train[numerical].corr()\n",
    "corr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "659377d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Correlations for numerical data')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x648 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f, ax = plt.subplots(figsize=(15, 9))\n",
    "sns.heatmap(corr,annot=True)\n",
    "plt.title('Correlations for numerical data')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82fa486d",
   "metadata": {},
   "source": [
    "The highest correlation is between households and total_bedrooms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d83be3c5",
   "metadata": {},
   "source": [
    "# Make median_house_values binary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9fb503f2",
   "metadata": {},
   "outputs": [],
   "source": [
    " above_average = (y_train.mean()<y_train).astype('int')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "370c6bbe",
   "metadata": {},
   "source": [
    "# Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c01aa966",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mutual_info_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dd939599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mutual_info_score(df_train.ocean_proximity,above_average).round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba9947fa",
   "metadata": {},
   "source": [
    "The closest answer is 0.101"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f32f62cb",
   "metadata": {},
   "source": [
    "# Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c6ebaa13",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction import DictVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8dc23115",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_dicts = df_train.to_dict(orient='records')\n",
    "dv = DictVectorizer(sparse=False)\n",
    "X_train = dv.fit_transform(train_dicts)\n",
    "\n",
    "val_dicts = df_val.to_dict(orient='records')\n",
    "X_val = dv.transform(val_dicts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e161bed0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "    return 1/(1+np.exp(-z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d77f97ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "def linear_regression(xi):\n",
    "    score = w0\n",
    "    for j in range(len(w)):\n",
    "        score = score + xi[j]*w[j]\n",
    "    result = sigmoid(score)\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5b485cc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7bf9e340",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(max_iter=1000, random_state=42, solver='liblinear')"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression(solver=\"liblinear\", C=1.0, max_iter=1000, random_state=42)\n",
    "model.fit(X_train,above_average)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2133b464",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5160, 17)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = model.predict_proba(X_val)[:,1]\n",
    "X_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f3cf6f9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "above_pred = y_pred>=0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "2291b0c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.835077519379845"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "((y_train.mean()<y_val).astype('int') == above_pred.astype('int')).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4d54e0ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>probability</th>\n",
       "      <th>prediction</th>\n",
       "      <th>actual</th>\n",
       "      <th>correct</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.007493</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.016595</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.784670</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.627343</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.258221</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5155</th>\n",
       "      <td>0.986504</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5156</th>\n",
       "      <td>0.042342</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5157</th>\n",
       "      <td>0.049973</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5158</th>\n",
       "      <td>0.806489</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5159</th>\n",
       "      <td>0.974277</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5160 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      probability  prediction  actual  correct\n",
       "0        0.007493           0       0     True\n",
       "1        0.016595           0       0     True\n",
       "2        0.784670           1       1     True\n",
       "3        0.627343           1       1     True\n",
       "4        0.258221           0       1    False\n",
       "...           ...         ...     ...      ...\n",
       "5155     0.986504           1       1     True\n",
       "5156     0.042342           0       0     True\n",
       "5157     0.049973           0       0     True\n",
       "5158     0.806489           1       1     True\n",
       "5159     0.974277           1       1     True\n",
       "\n",
       "[5160 rows x 4 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pred = pd.DataFrame()\n",
    "df_pred['probability'] = y_pred\n",
    "df_pred['prediction'] =  above_pred.astype('int')\n",
    "df_pred['actual'] = ((y_train).mean()<y_val).astype('int') \n",
    "df_pred['correct'] = df_pred.prediction==df_pred.actual\n",
    "df_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "67aa02b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.84"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc = df_pred.correct.mean().round(2)\n",
    "acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dba2c96c",
   "metadata": {},
   "source": [
    "# Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "aa28722f",
   "metadata": {},
   "outputs": [],
   "source": [
    "eliminate = ['total_rooms',\n",
    "'total_bedrooms',\n",
    "'population',\n",
    "'households']\n",
    "features=['latitude',\n",
    "'longitude',\n",
    "'housing_median_age',\n",
    "'total_rooms',\n",
    "'total_bedrooms',\n",
    "'population',\n",
    "'households',\n",
    "'median_income',\n",
    "'ocean_proximity']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "17ed685d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total_rooms 0.8374031007751938 -0.002596899224806215\n",
      "total_bedrooms 0.835077519379845 -0.00492248062015499\n",
      "population 0.818217054263566 -0.021782945736434023\n",
      "households 0.8308139534883721 -0.00918604651162791\n"
     ]
    }
   ],
   "source": [
    "for i in eliminate:\n",
    "    feat = features.copy()\n",
    "    feat.remove(i)\n",
    "    train_dicts = df_train[feat].to_dict(orient='records')\n",
    "    dv = DictVectorizer(sparse=False)\n",
    "    X_train = dv.fit_transform(train_dicts)\n",
    "\n",
    "    val_dicts = df_val[feat].to_dict(orient='records')\n",
    "    X_val = dv.transform(val_dicts)\n",
    "    \n",
    "    model = LogisticRegression(solver=\"liblinear\", C=1.0, max_iter=1000, random_state=42)\n",
    "    model.fit(X_train,above_average)\n",
    "    y_pred = model.predict_proba(X_val)[:,1]\n",
    "    above_predi = y_pred>=0.5\n",
    "    acc_f = ((y_train.mean()<y_val).astype('int') == above_predi.astype('int')).mean()\n",
    "    print(i,acc_f,acc_f-acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ec22b76",
   "metadata": {},
   "source": [
    "total_rooms is the feature that has the smallest difference"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19cb2c7a",
   "metadata": {},
   "source": [
    "# Question 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "24311b54",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "52b61f86",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([228500., 279900., 183000., ..., 222100., 283500., 325000.])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2998569a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([12.33929587, 12.54219125, 12.1172469 , ..., 12.31088751,\n",
       "       12.55497093, 12.69158354])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_log = np.log1p(y_train)\n",
    "y_train_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d106c7de",
   "metadata": {},
   "outputs": [],
   "source": [
    "def rmse(predictions, targets):\n",
    "    return np.sqrt(((predictions - targets) ** 2).mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d6803ec6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Damian Marvel\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\_ridge.py:157: LinAlgWarning: Ill-conditioned matrix (rcond=2.64486e-22): result may not be accurate.\n",
      "  return linalg.solve(A, Xy, sym_pos=True, overwrite_a=True).T\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0.334\n",
      "0.01 0.334\n",
      "0.1 0.334\n",
      "1 0.334\n",
      "10 0.333\n"
     ]
    }
   ],
   "source": [
    "for i in [0, 0.01, 0.1, 1, 10]:\n",
    "    train_dicts = df_train.to_dict(orient='records')\n",
    "    dv = DictVectorizer(sparse=False)\n",
    "    X_train = dv.fit_transform(train_dicts)\n",
    "\n",
    "    val_dicts = df_val.to_dict(orient='records')\n",
    "    X_val = dv.transform(val_dicts)\n",
    "    model = Ridge(alpha=i)\n",
    "    model.fit(X_train,y_train_log)\n",
    "    y_pred = model.predict(X_val)\n",
    "    print(i,rmse(np.log1p(y_val),y_pred).round(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a653428e",
   "metadata": {},
   "source": [
    "10 has the best rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "712901eb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
